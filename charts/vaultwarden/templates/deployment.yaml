---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "vaultwarden.fullname" . }}
  labels:
    {{- include "vaultwarden.labels" . | nindent 4 }}
spec:
  {{- if not .Values.horizontalAutoscaling.enabled }}
  replicas: {{ .Values.replicaCount }}
  {{- end }}
  {{- with .Values.deploymentStrategy }}
  strategy:
    {{- toYaml . | trim | nindent 4 }}
  {{- end }}
  selector:
    matchLabels:
      {{- include "vaultwarden.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "vaultwarden.selectorLabels" . | nindent 8 }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "vaultwarden.serviceAccountName" . }}
      securityContext:
        {{- if eq .Values.vaultwarden.environment "production"}}
        runAsNonRoot: {{ .Values.podSecurityContext.runAsNonRoot | default true }}
        runAsUser: {{ .Values.podSecurityContext.runAsUser | default 1000 }}
        runAsGroup: {{ .Values.podSecurityContext.runAsGroup | default 1000 }}
        fsGroup: {{ .Values.podSecurityContext.fsGroup | default 1000 }}
        {{- else }}
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
        {{- end }}
      {{- if ( or .Values.initContainers .Values.zalandoPostgresql.enabled ) }}
      initContainers:
        {{- if .Values.cnpg.enabled }}
        - name: check-postgresql-ready
          image: "postgres:{{ .Values.cnpg.version }}"
          command: ['bash', '-c',
            'until pg_isready; do echo waiting for database be ready; sleep 2; done;']
          args: []
          env:
            - name: PGHOST
              valueFrom:
                secretKeyRef:
                  name: "{{ include "vaultwarden.fullname" . }}-app"
                  key: "hostname"
            - name: PGUSER
              valueFrom:
                secretKeyRef:
                  name: "{{ include "vaultwarden.fullname" . }}-app"
                  key: "username"
            - name: PGPASSWORD
              valueFrom:
                secretKeyRef:
                  name: "{{ include "vaultwarden.fullname" . }}-app"
                  key: "password"
            - name: PGDATABASE
              valueFrom:
                secretKeyRef:
                  name: "{{ include "vaultwarden.fullname" . }}-app"
                  key: "database"
        {{- end }}
        {{- if .Values.zalandoPostgresql.enabled }}
        - name: check-postgresql-ready
          image: "postgres:{{ .Values.zalandoPostgresql.version }}"
          command: ['bash', '-c',
            'until pg_isready; do echo waiting for database be ready; sleep 2; done;']
          args: []
          env:
            - name: PGHOST
              value: {{ .Values.zalandoPostgresql.teamId | default "acid" }}-{{ include "vaultwarden.fullname" . }}
            - name: PGUSER
              valueFrom:
                secretKeyRef:
                  name: "{{ include "vaultwarden.fullname" . }}.{{ .Values.zalandoPostgresql.teamId | default "acid" }}-{{ include "vaultwarden.fullname" . }}.credentials.postgresql.acid.zalan.do"
                  key: "username"
            - name: PGPASSWORD
              valueFrom:
                secretKeyRef:
                  name: "{{ include "vaultwarden.fullname" . }}.{{ .Values.zalandoPostgresql.teamId | default "acid" }}-{{ include "vaultwarden.fullname" . }}.credentials.postgresql.acid.zalan.do"
                  key: "password"
            - name: PGDATABASE
              value: {{ include "vaultwarden.fullname" . }}
        {{- end }}
        {{- range $name, $properties := .Values.initContainers }}
        - name: {{ $name | quote }}
          {{- toYaml $properties | nindent 10 }}
        {{- end }}
      {{- end }}
      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            {{- if eq .Values.vaultwarden.environment "production"}}
            allowPrivilegeEscalation: false
            {{- else }}
            {{- toYaml .Values.securityContext | nindent 12 }}
            {{- end }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          {{- if eq .Values.vaultwarden.environment "production"}}
          env:
            - name: ROCKET_PORT
              value: {{ .Values.vaultwarden.rocketPort | quote }}
          {{- if ne .Values.vaultwarden.adminToken.value "disabled" }}
            - name: ADMIN_TOKEN
              valueFrom:
                secretKeyRef:
                  name: {{ template "vaultwarden.fullname" . }}-admin-token
                  key: admin-token
          {{- end }}
          {{- if .Values.cnpg.enabled }}
            - name: DATABASE_URL
              valueFrom:
                secretKeyRef:
                  name: "{{ include "vaultwarden.fullname" . }}-app"
                  key: "database-url"
          {{- end }}
          {{- if .Values.zalandoPostgresql.enabled }}
            - name: POSTGRES_HOST
              value: {{ .Values.zalandoPostgresql.teamId | default "acid" }}-{{ include "vaultwarden.fullname" . }}
            - name: POSTGRES_USER
              valueFrom:
                secretKeyRef:
                  name: "{{ include "vaultwarden.fullname" . }}.{{ .Values.zalandoPostgresql.teamId | default "acid" }}-{{ include "vaultwarden.fullname" . }}.credentials.postgresql.acid.zalan.do"
                  key: "username"
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: "{{ include "vaultwarden.fullname" . }}.{{ .Values.zalandoPostgresql.teamId | default "acid" }}-{{ include "vaultwarden.fullname" . }}.credentials.postgresql.acid.zalan.do"
                  key: "password"
            - name: DATABASE_URL
              value: "postgresql://$(POSTGRES_USER):$(POSTGRES_PASSWORD)@$(POSTGRES_HOST):5432/{{ include "vaultwarden.fullname" . }}"
          {{- end }}
          {{- include "vaultwarden.extraEnvironmentVars" .Values | nindent 12 }}
          {{- end }}
          volumeMounts:
            - name: data
              mountPath: /data
              {{- if and .Values.persistence.enabled .Values.persistence.subPath }}
              subPath: {{ .Values.persistence.subPath }}
              {{- end }}
            {{- with .Values.additionalVolumeMounts }}
              {{- toYaml . | nindent 12 }}
            {{- end }}
          ports:
            - name: http
              {{- if eq .Values.vaultwarden.environment "production"}}
              containerPort: {{ .Values.vaultwarden.rocketPort }}
              {{- else }}
              containerPort: 80
              {{- end }}
              protocol: TCP
          {{- with .Values.livenessProbe }}
          livenessProbe:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          {{- with .Values.readinessProbe }}
          readinessProbe:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
      volumes:
        - name: data
          {{- if .Values.persistence.enabled }}
          persistentVolumeClaim:
            {{ if .Values.persistence.existingClaim }}
            claimName: {{ .Values.persistence.existingClaim }}
            {{- else }}
            claimName: {{ template "vaultwarden.fullname" . }}
            {{- end }}
          {{- else }}
          emptyDir: {}
          {{- end }}
        {{- range $name, $properties := .Values.additionalVolumes }}
        - name: {{ $name | quote }}
          {{- toYaml $properties | nindent 10 }}
        {{- end }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
